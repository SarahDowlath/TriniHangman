package com.example.trini_hangman;

	import com.example.trini_hangman.R;
	import java.util.Random;
	import android.app.Activity; 
	import android.app.AlertDialog; 
	import android.app.Dialog;
	import android.content.DialogInterface; 
	import android.content.Intent; 
	import android.content.res.Resources;
	import android.os.Bundle; 
	import android.util.Log; 
	import android.view.KeyEvent; 
	import android.view.View; 
	import android.view.View.OnClickListener;
	import android.widget.Button; 
	import android.widget.ImageView; 
	import android.widget.TextView; 
	import android.widget.Toast;
	import android.support.v4.app.NavUtils;
	import android.view.Menu;
	import android.view.MenuItem;

	 
	 
	 public class Game extends Activity  {
		 
		 
		 private Random rand= new Random();
		 private String key;
		 
		 
		 //The textview of the mystery word to be guessed
		 private TextView mystWord;
		 
		 //The textView of the string of letters guessed incorrectly
		 private TextView wrongletters;
		 
		 //the View of the the displayed Hangman image
		 private ImageView hangmanimg;
		 
		 private Button hintbutton;
		 
		 private Dialog dialog;
		 
		 
		 private int currentDialogId;
		 
		 private int numWrongGuesses;
		 private String mysteryWord;
		 private Boolean hintused = false;
		 private int cat; //category
		 
		 /**** do we need Dialog? ****/ 
	
		 static final String KEY_CATEGORY= "com.example.trini_hangmam.category";
		 
		 public static final int CATEGORY_FOOD =0;
		 public static final int CATEGORY_MUSIC = 1;
		 public static final int CATEGORY_SPORTS = 2; 
		 
		 protected static final int CATEGORY_CONTINUE = -1; 
		 
		 private static final String PREF_MYSTWORD = "mystword";  
		 private static final String PREF_MYSTERYWORD = "mysterytword";  
		 private static final String PREF_WRONGLETTERS = "wrongletters";  
		 private static final String PREF_NUMWRONGGUESSES = "numWrongGuesses";  
		 private static final String PREF_HINTUSED = "hintused"; 
		 
		 String categoryArray[];
		 
		 
		 /* The following variables will be used to set the parts invisible and visible*/
		 private ImageView [] bodyParts;//num of body parts
		 
		 private int numParts=6;
		 
		 private int currPart;
		 //number of characters in current word
		 
		 private int numChars;
		 //number correctly guessed
		 
		 private int numCorr;
		 /*********************************************************/
		 
	
		 /** Called when the activity is first created. */  
		 @Override  
		 public void onCreate(Bundle savedInstanceState) {   
			 super.onCreate(savedInstanceState);   
			
			/* *//*************not sure if this is needed for openNewGameDialong() **************//*
			 Resources res=getResources();
			 categoryArray = res.getStringArray(R.array.category);
			 */
			 
			 
			 setContentView(R.layout.game);  
			 
			
			 
			 
			 bodyParts = new ImageView[numParts];
			 bodyParts[0] = (ImageView)findViewById(R.id.android_hangman_head);
			 bodyParts[1] = (ImageView)findViewById(R.id.android_hangman_body);
			 bodyParts[2] = (ImageView)findViewById(R.id.android_hangman_arm1);
			 bodyParts[3] = (ImageView)findViewById(R.id.android_hangman_arm2);
			 bodyParts[4] = (ImageView)findViewById(R.id.android_hangman_leg1);
			 bodyParts[5] = (ImageView)findViewById(R.id.android_hangman_leg2);
			 
			 
			 //bindViews();  // bind the resource views to textview and imageview holders   
			 
			 setWordByCategory();   // get selected category and assign mystery word  
			 
			 initMystWord();   // initialize the Mystery word view with underscores   
			 
			 //initWrongGuesses();  // initialize the number of wrong guesses and wrong guesses view string  
			 
			// initImg(); // initialize hangman imageview  
			 
			// setClickListeners();  // set OnClick Listeners for each button in the view   
			 
			  
			// loadGameIfSaved();  // load game if saved 
		}  //end onCreate
		 
		 
	
		 
		 
		/* private void bindViews() {
			 
			 mystWord = (TextView) this.findViewById(R.id.mysteryWord);
			 wrongletters = (TextView)this.findViewById(R.id.wrongletters);
			 this.findViewById(R.id.hangman_img);
			 
			 
		 }*/
		 
		 
		 
	 
		 private void setWordByCategory() 
		 {  
			 
			cat = getIntent().getIntExtra(KEY_CATEGORY, CATEGORY_MUSIC);   //how do you know which category was selected? 
			mysteryWord = getWord(cat);  
			 
		 }  	 
		 
		 
		 private String getWord(int cat) {   
			 String temp;   
			 switch (cat) {   
			 case CATEGORY_CONTINUE:    
				 temp = getPreferences(MODE_PRIVATE).getString(PREF_MYSTERYWORD,getWord(CATEGORY_FOOD));    
				 break;   
				 
				 case CATEGORY_MUSIC:    
					 temp = "SOCA";    
					 //randomly generate words 
					 
					 break;   
					 
				 case CATEGORY_FOOD:    
					 temp = "PELAU";    
					 break;   
					 
				case CATEGORY_SPORTS:    
					temp = "LARA";    
					break;   
					
				default:    temp = "DEFAULT";   
				}   
			 return temp;
		 }
		 
		 
		 
		 /**   * sets the View of Mystery Word to a text view with underscores and spaces   */  
		 private void initMystWord() {  
			 mystWord.setText(underscore());  
			 
		 }  
		 /**   * updates the View of the Mystery Word to display all occurrences of the   * passed character   * 
		 
		 
	
		 /**   * converts the textview to a view with underscores and spaces   *    * @return   */  
		 private String underscore() {   
			 StringBuffer result = new StringBuffer();   
			 for (int i = 0; i < mysteryWord.length(); i++) 
			 { 
				 result.append("_ "); 
				 
			 }
		 return result.toString(); 
		 
		 }
		 
	 
		//needed for when the game ends to start a new game immediately? 
		 
		  private void openNewGameDialog(){
		 
		 AlertDialog.Builder dBuilder=new AlertDialog.Builder(this);
		 dBuilder.setTitle("Select a category");
		 dBuilder.setItems(R.array.category,new DialogInterface.OnClickListener(){
			 
			 public void onClick(DialogInterface dialogInt, int item){
				// Toast.makeText(getApplicationContext(), categoryArray[item], Toast.LENGTH_SHORT).show(); 
				 startGame(item);
				 Toast.makeText(getApplicationContext(),"testing2", Toast.LENGTH_SHORT).show(); //testing TOAST
			 }
			 });
			 
		 
			AlertDialog alert = dBuilder.create();
			//display Dialog box
			alert.show();
			 
			 
		 }//end openNewGameDialog 
			 
				 
			 
					 				
		 
		 
		 public void startGame(int i){
			 
			// Log.d(TAG, "clicked on" + i);
			 
			 Intent intent = new Intent (Game.this, Game.class);
			 intent.putExtra(Game.KEY_CATEGORY, i);
			 startActivity(intent);
			 finish();
		 }
				 
				 
		/*public void onClick(View v)
		{
			
			
			switch(v.getId()){
			
			case R.id.buttonA:  inputLetter('a');
			break;
			
			case R.id.buttonB:  inputLetter('b');
			break;
			
			case R.id.buttonC:  inputLetter('c');
			 break;
			 
			case R.id.buttonD:  inputLetter('d');
			break;
			
			case R.id.buttonE:  inputLetter('e');
			break;
			
			case R.id.buttonF:  inputLetter('f');
			break;
			
			case R.id.buttonG:  inputLetter('g');
			break;
			
			case R.id.buttonH:  inputLetter('h');
			break;
			
			case R.id.buttonI:  inputLetter('i');
			break;
			
			case R.id.buttonJ:  inputLetter('j');
			break;
			
			case R.id.buttonK:  inputLetter('k');
			break;
			
			case R.id.buttonL:  inputLetter('l');
			break;
			
			case R.id.buttonM:  inputLetter('m');
			break;
			
			case R.id.buttonN:  inputLetter('n');
			 break;
			 
			case R.id.buttonO:  inputLetter('o');
			break;
			
			case R.id.buttonP:  inputLetter('p');
			break;
			
			case R.id.buttonQ:  inputLetter('q');
			break;
			
			case R.id.buttonR:  inputLetter('r');
			break;
			
			case R.id.buttonS:  inputLetter('s');
			break;
			
			case R.id.buttonT:  inputLetter('t');
			break;
			
			case R.id.buttonU:  inputLetter('u');
			break;
			
			case R.id.buttonV:  inputLetter('v');
			break;
			
			case R.id.buttonW:  inputLetter('w');
			break;
			
			case R.id.buttonX:  inputLetter('x');
			break;
			
			case R.id.buttonY:  inputLetter('y');
			break;
			
			case R.id.buttonZ:  inputLetter('z');
			break;
			
			
			}
			
			
			
		}*/
	
	
		/*private void inputLetter(char c){
			boolean isContain = false;
			for(int i =0; i < key.length();++i){
				char ans = key.charAt(i);
				if(c == ans){
					isContain = true;
					curAnswer.set(i, true);
				}
			}
			if(curMan > 0 &&isContain){
				curMan--;
			}
			disableLetter(c);
		}
	
	
	
		private void disableLetter(char c){
			char C = Character.toUpperCase(c);
			String buttonID = "button" + C;
		    int resID = getResources().getIdentifier(buttonID, "id", "com.example.hangu");
		    Button b = (Button) findViewById(resID);
		    b.setEnabled(false);
		}
	
	
		
		
		
		public void goHome(View view) {   
		       Intent intent = new Intent(this, MainActivity.class);
		       startActivity(intent);
		}
		
		public void nextOne(View view) {   
		       Intent intent = new Intent(this, Game.class);
		    //   intent.putExtra("level", curlevel);
		       //startActivity(intent);
		}

		@Override
		public void onBackPressed() {
			Intent intent = new Intent(Intent.ACTION_MAIN);
			intent.addCategory(Intent.CATEGORY_HOME);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			startActivity(intent);
		}
	
	
	*/
	
	

}//end class Game 
